{
	"name": "ErrorHandlingMchms",
	"properties": {
		"content": {
			"query": "/*\n\nError Handling Mechanisms\n1. Error Logging:\nCreate an error log table to capture and log errors during the ETL process.\n\n2. Transaction Management:\nUse transactions to ensure data integrity during the ETL process.\n\n3. Retry Mechanism: (Handled in different way)\nImplement a retry mechanism for transient errors.\n\n*/\n------------------------------------------------------------------------------------------------------------------\n\n/*  1. Error Logging:\nCreate an error log table to capture and log errors during the ETL process.*/\n\n-- Example of logging an error\nINSERT INTO ErrorLog (TableName, ErrorDescription, RecordID)\nVALUES ('staggingSales', 'Null ProductID', 12345);  -- Assuming 12345 is the SalesID with the error\n\n----------------------------------------------------------------------------------------\n\n/*  2. Transaction Management: (Failed cannot be done because synapse will not support the Transaction)\nUse transactions to ensure data integrity during the ETL process.*/\n\n-- Example of using a transaction in ETL\nBEGIN TRANSACTION;\n\nBEGIN TRY\n    -- Perform ETL operations\n    INSERT INTO dbo.Product (ProductID, ProductName, Category, Price, SupplierID)\n    SELECT DISTINCT ProductID, ProductName, Category, Price, SupplierID\n    FROM staggingProduct;\n\n    INSERT INTO Customer (CustomerID, CustomerName, Gender, Age, Region, LoyaltyCardID)\n    SELECT DISTINCT CustomerID, CustomerName, Gender, Age, Region, LoyaltyCardID\n    FROM staggingCustomer;\n\n    -- If all operations succeed, commit the transaction\n    COMMIT TRANSACTION;\nEND TRY\nBEGIN CATCH\n    -- If an error occurs, rollback the transaction\n    ROLLBACK TRANSACTION;\n\n    -- Log the error\n    INSERT INTO ErrorLog (TableName, ErrorDescription, RecordID)\n    VALUES ('ETL Process', ERROR_MESSAGE(), NULL);\nEND CATCH;\n\n\n/* 3. Retry Mechanism:\nImplement a retry mechanism for transient errors. */\n\n-- Example of retry mechanism using a loop\nDECLARE @RetryCount INT = 0;\nDECLARE @MaxRetries INT = 3;\nDECLARE @Success BIT = 0;\n\nWHILE @RetryCount < @MaxRetries AND @Success = 0\nBEGIN\n    BEGIN TRY\n        -- Perform ETL operations\n        INSERT INTO Product (ProductID, ProductName, Category, Price, SupplierID)\n        SELECT DISTINCT ProductID, ProductName, Category, Price, SupplierID\n        FROM Staging_Product;\n\n        -- If the operation succeeds, set @Success to 1\n        SET @Success = 1;\n    END TRY\n    BEGIN CATCH\n        -- Increment the retry count and wait before retrying\n        SET @RetryCount = @RetryCount + 1;\n        WAITFOR DELAY '00:00:10';  -- Wait for 10 seconds before retrying\n\n        -- Log the error\n        INSERT INTO ErrorLog (TableName, ErrorDescription, RecordID)\n        VALUES ('ETL Process', ERROR_MESSAGE(), NULL);\n    END CATCH;\nEND;\n\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "dedicatedsqlpool",
				"poolName": "dedicatedsqlpool"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}